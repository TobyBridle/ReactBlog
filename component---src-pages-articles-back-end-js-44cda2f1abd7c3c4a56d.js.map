{"version":3,"file":"component---src-pages-articles-back-end-js-44cda2f1abd7c3c4a56d.js","mappings":"4OAoBe,SAASA,IAEpB,IAASC,GAAUC,EAAAA,EAAAA,gBAAeC,EAAAA,GAAlC,GAEIC,EAASC,GAAYC,YAEzBC,EAAAA,WAAgB,WACZN,EAAO,CACHO,UAAW,qBACXC,WAAY,eAEjB,IAEH,IAAMC,EAAO,CACTC,MAAO,0BACPC,aAAa,IAAIC,MAAOC,SAASC,MAAM,EAAG,IAAIC,QAAQ,KAAM,KAA/C,iJAKIC,GACjBC,EAAAA,EAAAA,IAAeC,GADfC,OAAUC,MAKd,OAFAJ,EAAQA,EAAMK,QAAO,SAAAC,GAAI,OAAIA,EAAKC,YAAYC,KAAKC,SAAS,eAGxD,gBAAC,IAAD,CAAQhB,KAAMA,EAAMiB,UAAU,YAC9B,gBAAC,IAAD,CAAUhB,MAAM,oBAAoBC,YAAY,yDAChD,2BAASe,UAAU,mCAEXV,EAAMW,KAAI,SAACL,GACP,IApCFM,EAAKC,EAoCH,EAWIP,EAVAC,YACIb,EAFR,EAEQA,MACAC,EAHR,EAGQA,YACAmB,EAJR,EAIQA,iBACAC,EALR,EAKQA,OACAC,EANR,EAMQA,cACAC,EAPR,EAOQA,KACAT,EARR,EAQQA,KAEJU,EACAZ,EADAY,WAGJ,OAEA,gBAAC,KAAD,CAAMC,IAAKF,EAAMP,UAAU,aAAaU,GAAIH,EAAMI,QAAS,kBAAMrC,EAAO,CAAEQ,WAAYE,EAAOH,UAAW0B,MACpG,uBAAKP,UAAU,mBACf,uBAAKA,UAAU,0BACX,uBAAKA,UAAU,6BACf,uBACIY,IAAKN,EACLO,IAAQR,EAAL,gBAGP,4BAAOA,IAEX,uBAAKL,UAAU,0BA9DC,IAAjBG,IAAAA,EAAU,KAAfD,EA8DkDlB,GA5D3DkB,EAAIY,OAASX,EAAYD,EAAId,MAAM,EAAGe,GAAWY,OAAS,MAAQb,EADzD,QA8DM,qBAAGF,UAAU,yBAAyB,qBACjCf,GAEL,uBAAKe,UAAU,kBAAkB,qBAC5BF,EAAKgB,OAAS,EACfhB,EAAKG,KAAI,SAACe,GACN,OACA,uBACIP,IAAKF,EAAOS,EACZhB,UAAU,iBACV,qBAECgB,MAKT,uBAAKhB,UAAU,iBAAiB,qBAC3BF,KAKT,uBAAKE,UAAU,oBACf,uBAAKA,UAAU,wBACX,uBAAKY,IAAQnC,EAAL,sBAAiC2B,EAAoBS,IAAK,uBAEtE,uBAAKb,UAAU,uBAAuB,qBAClC,gBAAC,IAAD,CACAA,UAAU,4BACViB,KAAMC,EAAAA,KAEN,wBAAM,qBAAgBV,EAAtB,aAGJ,gBAAC,IAAD,CAAWW,KAAK,gBAWxC,IAAM3B,EAAiB","sources":["webpack://blog/./src/pages/articles/back-end.js"],"sourcesContent":["import React from 'react';\nimport PageMeta from '../../components/Explore/PageMeta/PageMeta';\nimport PageSplit from '../../components/PageSplit/PageSplit';\nimport Layout from '../../components/layout';\n\nimport { useRecoilState } from 'recoil';\nimport navigationAtom from '../../state/navigationAtom';\n\nimport { useStaticQuery, graphql, Link } from 'gatsby';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faClock } from '@fortawesome/free-regular-svg-icons';\n\nimport \"./temp.css\"\n\nconst truncate = (str, maxlength=48) => {\n  if(!str) return \"...\"\n  return str.length > maxlength ? str.slice(0, maxlength).trim() + \"...\" : str;\n}\n\nexport default function FrontEnd() {\n\n    const [, setURL] = useRecoilState(navigationAtom);\n\n    let origin = process.env.PAGE_ORIGIN;\n\n    React.useEffect(() => {\n        setURL({\n            routeSlug: \"/articles/back-end\",\n            routeTitle: \"Back-End\"\n        })\n    }, [])\n\n    const meta = {\n        title: \"Articles about Back-End\",\n        description: new Date().toJSON().slice(0, 10).replace(/-/g, \"/\") +\n      \" - \" + \"Want to read some articles about Back-End Developoment? Look no further, here are some articles to release the StackOverflow inside of you\" \n    }\n\n    let  {\n        allMdx: { nodes: posts }\n    } = useStaticQuery(BlogPostsMetaData)\n\n    posts = posts.filter(post => post.frontmatter.tags.includes(\"Back End\"));\n\n    return (\n        <Layout meta={meta} className=\"use-temp\">\n        <PageMeta title=\"Back-End Articles\" description=\"Articles to release the StackOverflow inside of you.\"/>\n        <section className=\"PostsContainer AllArticles-Flow\">\n            {\n                posts.map((post) => {\n                    const {\n                        frontmatter: {\n                            title,\n                            description,\n                            articleThumbnail,\n                            author,\n                            authorPicture,\n                            slug,\n                            tags,\n                        },\n                        timeToRead\n                    } = post;\n\n                    return (\n\n                    <Link key={slug} className=\"blog-route\" to={slug} onClick={() => setURL({ routeTitle: title, routeSlug: slug })}>\n                        <div className=\"blog-route-left\">\n                        <div className=\"blog-route-author-info\">\n                            <div className=\"blog-route-author-profile\">\n                            <img\n                                src={authorPicture}\n                                alt={`${author}'s Profile`}\n                            />\n                            </div>\n                            <span>{author}</span>\n                        </div>\n                        <div className=\"blog-route-title\">{truncate(title)}</div>\n                        <p className=\"blog-route-description\" data-nosnippet>\n                            {description}\n                        </p>\n                        <div className=\"blog-route-tags\" data-nosnippet>\n                            {tags.length > 1 ? (\n                            tags.map((tag) => {\n                                return (\n                                <div\n                                    key={slug + tag}\n                                    className=\"blog-route-tag\"\n                                    data-nosnippet\n                                >\n                                    {tag}\n                                </div>\n                                );\n                            })\n                            ) : (\n                            <div className=\"blog-route-tag\" data-nosnippet>\n                                {tags}\n                            </div>\n                            )}\n                        </div>\n                        </div>\n                        <div className=\"blog-route-right\">\n                        <div className=\"blog-route-thumbnail\">\n                            <img src={`${origin}/assets/Thumbnails/${articleThumbnail}`} alt={\"Article Thumbnail\"} />\n                        </div>\n                        <div className=\"blog-route-estimated\" data-nosnippet>\n                            <FontAwesomeIcon\n                            className=\"blog-route-estimated-icon\"\n                            icon={faClock}\n                            />\n                            <span data-nosnippet>{timeToRead} min(s)</span>\n                        </div>\n                        </div>\n                        <PageSplit size=\"large\" />\n                    </Link>\n                    )\n\n            })\n        }\n        </section>\n    </Layout>\n  )\n}\n\nconst BlogPostsMetaData = graphql`\n  query {\n    allMdx{\n      nodes {\n        frontmatter {\n          title\n          description\n          articleThumbnail\n          author\n          authorPicture\n          slug\n          tags\n        }\n        timeToRead\n      }\n    }\n  }\n`;"],"names":["FrontEnd","setURL","useRecoilState","navigationAtom","origin","process","PAGE_ORIGIN","React","routeSlug","routeTitle","meta","title","description","Date","toJSON","slice","replace","posts","useStaticQuery","BlogPostsMetaData","allMdx","nodes","filter","post","frontmatter","tags","includes","className","map","str","maxlength","articleThumbnail","author","authorPicture","slug","timeToRead","key","to","onClick","src","alt","length","trim","tag","icon","faClock","size"],"sourceRoot":""}