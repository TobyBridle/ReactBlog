{"version":3,"file":"component---src-pages-articles-js-65fb0da458eb4d8880f0.js","mappings":"sMAyHA,IAAMA,EAAiB,aAmBvB,UAxHA,WAEI,IAASC,GAAUC,EAAAA,EAAAA,gBAAeC,EAAAA,GAAlC,GAGAC,EAAAA,WAAgB,WACZH,EAAO,CAACI,UAAW,YAAaC,WAAY,mBAC7C,IAEL,IACqBC,GACjBC,EAAAA,EAAAA,IAAeR,GADfS,OAAUC,MAGRC,EAAO,CACXC,MAAO,eACPC,aACE,IAAIC,MAAOC,SAASC,MAAM,EAAG,IAAIC,QAAQ,KAAM,KAA/C,oIAKJ,OACI,gBAAC,IAAD,CAAQN,KAAMA,EAAMO,UAAU,YAC5B,gBAAC,IAAD,CAAUN,MAAM,eAAeC,YAAY,iEACzC,2BAASK,UAAU,mCAEXX,EAAMY,KAAI,SAACC,GACP,IAhCJC,EAAKC,EAgCD,EAWIF,EAVAG,YACIX,EAFR,EAEQA,MACAC,EAHR,EAGQA,YACAW,EAJR,EAIQA,iBACAC,EALR,EAKQA,OACAC,EANR,EAMQA,cACAC,EAPR,EAOQA,KACAC,EARR,EAQQA,KAEJC,EACAT,EADAS,WAGJ,OAEE,gBAAC,KAAD,CAAMC,IAAKH,EAAMT,UAAU,aAAaa,GAAIJ,EAAMK,QAAS,kBAAM/B,EAAO,CAAEK,WAAYM,EAAOP,UAAWsB,MACpG,uBAAKT,UAAU,mBACf,uBAAKA,UAAU,0BACX,uBAAKA,UAAU,6BACf,uBACIe,IAAKP,EACLQ,IAAQT,EAAL,gBAGP,4BAAOA,IAEX,uBAAKP,UAAU,0BA1DH,IAAjBI,IAAAA,EAAU,KAAfD,EA0DsDT,GAxD/DS,EAAIc,OAASb,EAAYD,EAAIL,MAAM,EAAGM,GAAWc,OAAS,MAAQf,EADzD,QA0DU,qBAAGH,UAAU,yBAAyB,qBACjCL,GAEL,uBAAKK,UAAU,kBAAkB,qBAC5BU,EAAKO,OAAS,EACfP,EAAKT,KAAI,SAACkB,GACN,OACA,uBACIP,IAAKH,EAAOU,EACZnB,UAAU,iBACV,qBAECmB,MAKT,uBAAKnB,UAAU,iBAAiB,qBAC3BU,KAKT,uBAAKV,UAAU,oBACf,uBAAKA,UAAU,wBACX,uBAAKe,IAAQK,4CAA4Bd,EAAoBU,IAAK,uBAEtE,uBAAKhB,UAAU,uBAAuB,qBAClC,gBAAC,IAAD,CACAA,UAAU,4BACVqB,KAAMC,EAAAA,KAEN,wBAAM,qBAAgBX,EAAtB,aAGJ,gBAAC,IAAD,CAAWY,KAAK","sources":["webpack://blog/./src/pages/articles.js"],"sourcesContent":["import React from 'react';\nimport { useStaticQuery, graphql, Link } from 'gatsby';\n\nimport { useRecoilState } from 'recoil';\nimport navigationAtom from '../state/navigationAtom';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faClock } from '@fortawesome/free-regular-svg-icons';\n\nimport PageSplit from '../components/PageSplit/PageSplit';\nimport Layout from \"../components/layout\";\nimport PageMeta from '../components/Explore/PageMeta/PageMeta';\n\nimport \"./articles.css\";\n\nconst truncate = (str, maxlength=48) => {\n  if(!str) return \"...\"\n  return str.length > maxlength ? str.slice(0, maxlength).trim() + \"...\" : str;\n}\n\nfunction Articles() {\n\n    const [, setURL] = useRecoilState(navigationAtom);\n    let origin = process.env.GATSBY_PAGE_ORIGIN;\n\n    React.useEffect(() => {\n        setURL({routeSlug: \"/articles\", routeTitle: \"All Articles\"});\n    }, [])\n\n  const {\n      allMdx: { nodes: posts }\n  } = useStaticQuery(BlogPostsMetaData);\n\n  const meta = {\n    title: \"All Articles\",\n    description:\n      new Date().toJSON().slice(0, 10).replace(/-/g, \"/\") +\n      \" - \" +\n      \"Some of the most popular hobbyist articles on the site. Gatsby, React & other frameworks are the centrepiece of our articles.\",\n  }\n\n  return (\n      <Layout meta={meta} className=\"use-temp\">\n        <PageMeta title=\"All Articles\" description=\"No trending or popular here, just all articles in one place.\" />\n          <section className=\"PostsContainer AllArticles-Flow\">\n              {\n                  posts.map((post) => {\n                      const {\n                          frontmatter: {\n                              title,\n                              description,\n                              articleThumbnail,\n                              author,\n                              authorPicture,\n                              slug,\n                              tags,\n                          },\n                          timeToRead\n                      } = post;\n\n                      return (\n\n                        <Link key={slug} className=\"blog-route\" to={slug} onClick={() => setURL({ routeTitle: title, routeSlug: slug })}>\n                            <div className=\"blog-route-left\">\n                            <div className=\"blog-route-author-info\">\n                                <div className=\"blog-route-author-profile\">\n                                <img\n                                    src={authorPicture}\n                                    alt={`${author}'s Profile`}\n                                />\n                                </div>\n                                <span>{author}</span>\n                            </div>\n                            <div className=\"blog-route-title\">{truncate(title)}</div>\n                            <p className=\"blog-route-description\" data-nosnippet>\n                                {description}\n                            </p>\n                            <div className=\"blog-route-tags\" data-nosnippet>\n                                {tags.length > 1 ? (\n                                tags.map((tag) => {\n                                    return (\n                                    <div\n                                        key={slug + tag}\n                                        className=\"blog-route-tag\"\n                                        data-nosnippet\n                                    >\n                                        {tag}\n                                    </div>\n                                    );\n                                })\n                                ) : (\n                                <div className=\"blog-route-tag\" data-nosnippet>\n                                    {tags}\n                                </div>\n                                )}\n                            </div>\n                            </div>\n                            <div className=\"blog-route-right\">\n                            <div className=\"blog-route-thumbnail\">\n                                <img src={`${origin}/assets/Thumbnails/${articleThumbnail}`} alt={\"Article Thumbnail\"} />\n                            </div>\n                            <div className=\"blog-route-estimated\" data-nosnippet>\n                                <FontAwesomeIcon\n                                className=\"blog-route-estimated-icon\"\n                                icon={faClock}\n                                />\n                                <span data-nosnippet>{timeToRead} min(s)</span>\n                            </div>\n                            </div>\n                            <PageSplit size=\"large\" />\n                        </Link>\n                      )\n\n                })\n            }\n          </section>\n      </Layout>\n  )\n\n}\n\nconst BlogPostsMetaData = graphql`\n  query {\n    allMdx {\n      nodes {\n        frontmatter {\n          title\n          description\n          articleThumbnail\n          author\n          authorPicture\n          slug\n          tags\n        }\n        timeToRead\n      }\n    }\n  }\n`;\n\nexport default Articles;"],"names":["BlogPostsMetaData","setURL","useRecoilState","navigationAtom","React","routeSlug","routeTitle","posts","useStaticQuery","allMdx","nodes","meta","title","description","Date","toJSON","slice","replace","className","map","post","str","maxlength","frontmatter","articleThumbnail","author","authorPicture","slug","tags","timeToRead","key","to","onClick","src","alt","length","trim","tag","origin","icon","faClock","size"],"sourceRoot":""}