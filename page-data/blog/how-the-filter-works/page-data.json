{"componentChunkName":"component---src-pages-mdx-frontmatter-slug-js","path":"/blog/how-the-filter-works/","result":{"data":{"mdx":{"frontmatter":{"slug":"/blog/how-the-filter-works","author":"Not Toby Bridle","authorPicture":"https://cdn.ebaumsworld.com/2020/01/13/021054/86172703/lego-star-wars-profile-4.jpg","date":"December 27 2021","title":"How does the Filtering Work?","description":"An Article explaining how the filter system would be used.","articleThumbnail":"how-the-filter-works.svg","squishThumbnail":false},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"rank\": 2,\n  \"following\": \"Admin\",\n  \"title\": \"How does the Filtering Work?\",\n  \"author\": \"Not Toby Bridle\",\n  \"articleThumbnail\": \"how-the-filter-works.svg\",\n  \"squishThumbnail\": false,\n  \"authorPicture\": \"https://cdn.ebaumsworld.com/2020/01/13/021054/86172703/lego-star-wars-profile-4.jpg\",\n  \"description\": \"An Article explaining how the filter system would be used.\",\n  \"slug\": \"/blog/how-the-filter-works\",\n  \"date\": \"2021-12-27\",\n  \"tags\": [\"Projects\", \"Front End\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar PostEnd = makeShortcode(\"PostEnd\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"How the Filter System currently works\"), mdx(\"p\", null, \"At the moment, since this is just a static page, GraphQL retrieves a list of articles & their metadata.\\nThis metadata contains lots of useful information, but what we use for the filtering is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rank\"), \" & \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"following\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rank\"), \" property shows how high on the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Popular\"), \" filter the article should be, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"following\"), \" just indicates that the article should be on the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Following\"), \" filter.\"), mdx(CodeHighlight, {\n    language: \"js\",\n    content: \"\\n  const {\\n    allMdx: { nodes }, // Map the value of `allMdx` to the variable `nodes`\\n  } = useStaticQuery(BlogPostsMetaData);\\n\\n\\n  // `postCount` was defined in the scope of the component\\n\\n  const pages = {\\n    following: nodes\\n      .filter((post) => post.frontmatter.following !== \\\"none\\\")\\n      .slice(0, postCount),\\n    popular: nodes\\n      .filter((post) => post.frontmatter.rank > 0)\\n      .sort((rank, rankAsc) => rank.frontmatter.rank - rankAsc.frontmatter.rank)\\n      .slice(0, postCount),\\n  };\\n\\n  const [activeFilter] = useRecoilState(FilterAtom);\\n\",\n    mdxType: \"CodeHighlight\"\n  }), mdx(Label, {\n    text: \"The Filter in JS\",\n    mdxType: \"Label\"\n  }), mdx(\"p\", null, \"As you can see in the snippet above, a GraphQL query is made to retrieve the necessary data about each blog post. The query returns an array of records which are then checked for the properties. Posts with the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"following\"), \" property, but not a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"rank\"), \", are placed into the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"following\"), \" key for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pages\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pages['following']\"), \"). Posts with a rank, are placed into the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"popular\"), \" key for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pages\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pages['popular']\"), \").\\nDepending on the state of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"activeFilter\"), \", the page will render one of the two (either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pages['following']\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pages['popular']\"), \").\"), mdx(\"h1\", null, \"How this could be done using a Server\"), mdx(\"p\", null, \"We could use a similar concept as already shown; however, rather than manually needing to update the frontmatter of each blog page - we could use GraphQL \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://graphql.org/learn/queries/\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"mutations\")), \". Mutations are used to update the value of a field on the server. We could combine a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \" and a mutation regarding the change of a field named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hits\"), \".\\nThen, when we are rendering the articles, we can sort by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hits\"), \" in descending order for the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Popular\"), \" filter.\"), mdx(PostEnd, {\n    mdxType: \"PostEnd\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"a189ea3a-bf88-57cd-8f5e-42fc7305f52d","frontmatter__slug":"/blog/how-the-filter-works","__params":{"frontmatter__slug":"blog"}}},"staticQueryHashes":[]}